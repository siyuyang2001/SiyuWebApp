/*
  app.js -- This creates an Express webserver
*/

// First we load in all of the packages we need for the server...
const createError = require("http-errors");
const express = require("express");
const path = require("path");
const cookieParser = require("cookie-parser");
const session = require("express-session");
//const bodyParser = require("body-parser");
const axios = require("axios");
var debug = require("debug")("personalapp:server");

// Now we create the server
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling ..
app.use(
  session({
    secret: "zzbbya789fds89snana789sdfa",
    resave: false,
    saveUninitialized: false
  })
);

//app.use(bodyParser.urlencoded({ extended: false }));

// This is an example of middleware
// where we look at a request and process it!
app.use(function(req, res, next) {
  //console.log("about to look for routes!!! "+new Date())
  console.log(`${req.method} ${req.url}`);
  //console.dir(req.headers)
  next();
});

// here we start handling routes
app.get("/", (req, res) => {
  res.render("index");
});

app.get("/demo",
        function (req, res){res.render("demo");});

app.get("/about", (request, response) => {
  response.render("about");
});

app.get("/form", (request,response) => {
  response.render("form")
})


app.get("/form", (request,response) => {
  response.render("form")
})

app.post('/showformdata', (req,res) => {
  const fullname=req.body.fullname
  const age=parseInt(req.body.age)
  const weight = parseInt(req.body.weight)
  const height=parseInt(req.body.height)
  const loseWeight=req.body.loseWeight
  const gender=req.body.gender

  res.locals.fullname=fullname
  res.locals.age = age
  res.locals.weight =weight
  res.locals.height= height
  res.locals.gender=gender
  res.locals.loseWeight= loseWeight
  res.locals.calories=calories(age,gender,loseWeight)
  res.render('formView')
})
function calories(age,gender,loseWeight){
  if(loseWeight=="no"){
  if(age>1&&age<4)
  return "1000";
  if(age>3&&age<9)
  return "1400-1600";
  if(age<14 &&age>8 && gender=="female")
  return "1600-2000";
  if(age<14 &&age>8 && gender=="male")
  return "1800-2200";
  if(age<19 &&age>13 && gender=="female")
  return "2000";
  if(age<19 &&age>13 && gender=="male")
  return "2400--2800";
  if(age<31 &&age>18 &&gender=="female")
  return "2000--2200";
  if(age<31 &&age>18 &&gender=="male")
  return "2600--2800";
  if(age<51 &&age>30 && gender=="female")
  return "2000";
  if(age<51 &&age>30 &&gender=="male")
  return "2400-2600";
  if(age>50)
  return "around 2000";
}
if(loseWeight=="yes"){
if(age>1&&age<4)
return "1000";
if(age>3&&age<9)
return "1200";
if(age<14 &&age>8 && gender=="female")
return "1600";
if(age<14 &&age>8 && gender=="male")
return "1800";
if(age<19 &&age>13 && gender=="female")
return "1800";
if(age<19 &&age>13 && gender=="male")
return "2000";
if(age<31 &&age>18 &&gender=="female")
return "2000";
if(age<31 &&age>18 &&gender=="male")
return "2400";
if(age<51 &&age>30 && gender=="female")
return "1800";
if(age<51 &&age>30 &&gender=="male")
return "2200";
if(age>50)
return "around 2000";
}}


app.get('/food', (req,res) => {
  res.render('food')
})

app.post("/getFoodData",
  async (req,res,next) => {
    try {
      const food = req.body.food
      const url = "https://api.nal.usda.gov/fdc/v1/foods/search?query="+food+
      "&pageSize=2&api_key=XnldbUVobwtWVk7okOaqtHPgMbOSrwLWYj2mdWGz"
      const result = await axios.get(url)
      console.dir(result.data)
      console.log('results')
      console.dir(result.data.results)
      res.locals.results = result.data
      res.locals.food = food
      res.locals.result = result
      // res.json(result.data)

      res.render('viewFood')
    } catch(error){
      next(error)
    }
})


// Don't change anything below here ...

// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});


//Here we set the port to use
const port = "5000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
